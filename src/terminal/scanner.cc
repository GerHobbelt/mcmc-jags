
#line 3 "../../../JAGS/src/terminal/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer zz_create_buffer
#define yy_delete_buffer zz_delete_buffer
#define yy_flex_debug zz_flex_debug
#define yy_init_buffer zz_init_buffer
#define yy_flush_buffer zz_flush_buffer
#define yy_load_buffer_state zz_load_buffer_state
#define yy_switch_to_buffer zz_switch_to_buffer
#define yyin zzin
#define yyleng zzleng
#define yylex zzlex
#define yylineno zzlineno
#define yyout zzout
#define yyrestart zzrestart
#define yytext zztext
#define yywrap zzwrap
#define yyalloc zzalloc
#define yyrealloc zzrealloc
#define yyfree zzfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE zzrestart(zzin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int zzleng;

extern FILE *zzin, *zzout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up zztext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via zzrestart()), so that the user can continue scanning by
	 * just pointing zzin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when zztext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int zzleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow zzwrap()'s to do buffer switches
 * instead of setting up a fresh zzin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void zzrestart (FILE *input_file  );
void zz_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE zz_create_buffer (FILE *file,int size  );
void zz_delete_buffer (YY_BUFFER_STATE b  );
void zz_flush_buffer (YY_BUFFER_STATE b  );
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void zzpop_buffer_state (void );

static void zzensure_buffer_stack (void );
static void zz_load_buffer_state (void );
static void zz_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER zz_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE zz_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE zz_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE zz_scan_bytes (yyconst char *bytes,int len  );

void *zzalloc (yy_size_t  );
void *zzrealloc (void *,yy_size_t  );
void zzfree (void *  );

#define yy_new_buffer zz_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *zzin = (FILE *) 0, *zzout = (FILE *) 0;

typedef int yy_state_type;

extern int zzlineno;

int zzlineno = 1;

extern char *zztext;
#define yytext_ptr zztext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up zztext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	zzleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[220] =
    {   0,
        0,    0,    0,    0,   41,   41,   66,   65,   44,   47,
       65,   65,   32,   33,   36,   29,   65,   63,   65,   55,
       37,   38,   65,   34,   63,   30,   31,   39,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   46,   65,   63,   53,   63,   63,   63,   63,
       63,   41,   42,   44,    0,   64,    0,   45,    0,   55,
       63,   63,   52,   40,   50,    0,   35,   63,   13,   26,
       63,   63,   63,   63,   63,   63,    3,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,    4,   63,   63,
       46,   53,   63,   54,   57,   63,   63,    0,   61,   63,

       63,   41,   42,   42,   43,   52,   63,   50,    0,    0,
       63,   63,   63,   63,   63,   63,   25,   63,   63,   63,
       63,   63,   63,   63,   27,   28,   63,   17,   63,   63,
       63,   63,   63,   63,   63,   63,   63,    0,    0,   63,
        0,   48,   63,   63,   63,   21,   63,    2,   24,   63,
       23,   63,   63,   63,   63,   63,   22,   19,   16,   63,
       56,   58,   63,   63,   63,   51,   51,   49,   12,   10,
       18,   63,   63,    5,    1,   63,   63,   63,   63,   63,
       63,    0,   60,   63,   63,   63,   63,   63,   63,   63,
       11,   63,   63,    7,   63,   14,    8,   63,   63,   63,

       63,   63,   15,   63,   20,   63,   63,   63,   63,   63,
       63,    9,    6,   63,    0,   59,    0,   62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,    1,    1,    1,   20,   21,   21,   22,   23,   21,
       21,   21,   21,   21,   21,   24,   21,   25,   21,   21,
       21,   21,   21,   21,   26,   21,   21,   21,   21,   21,
       27,   28,   29,    1,   28,   30,   31,   32,   33,   34,

       35,   21,   36,   37,   38,   21,   21,   39,   40,   41,
       42,   43,   21,   44,   45,   46,   47,   21,   48,   49,
       50,   51,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    3,    3,    3,    3,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    1,    3,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[227] =
    {   0,
        0,    0,   49,   92,  254,  244,  250,  832,   51,  832,
      242,  228,  832,  832,  832,  832,   41,   45,  211,   52,
      832,  832,  207,  832,   56,  832,  832,  832,   64,   71,
      126,   88,   94,  118,   76,  105,  116,  130,  137,  146,
      152,  162,  210,   76,  181,  186,  180,  183,   56,  196,
      158,    0,   63,  110,  193,  832,  187,  832,  151,  209,
        0,   89,  113,  832,  147,  117,  832,  205,  206,  208,
      211,  214,  224,  230,  231,  236,  248,  238,  254,  256,
      261,  275,  273,  280,  266,  282,  287,  292,  299,  301,
      142,  316,  306,  832,  315,  324,  336,   94,  832,  323,

      329,    0,  142,  143,  832,  172,  163,  233,  213,  119,
      331,  341,  349,  350,  355,  357,  358,  371,  374,  376,
      377,  383,  384,  393,  396,  401,  402,  403,  415,  421,
      422,  423,  435,  441,  442,  428,  447,  268,   96,   82,
       78,   75,  454,  455,  460,  467,  472,  474,  477,  484,
      486,  496,  493,  502,  503,  515,  510,  516,  522,  524,
      529,  532,  538,  564,  541,   66,   54,   51,  546,  551,
      554,  559,  571,  572,  573,  578,  580,  581,  594,  597,
      599,  296,  832,  600,  602,  616,  619,  607,  625,  626,
      633,  638,  643,  645,  650,  652,  664,  669,  671,  672,

      678,  688,  690,  696,  695,  697,  698,  714,  716,  719,
      746,  721,  724,  762,  376,  832,  392,  832,  832,  808,
      812,  816,  818,  822,  826,  827
    } ;

static yyconst flex_int16_t yy_def[227] =
    {   0,
      219,    1,    1,    1,  220,  220,  219,  219,  219,  219,
      221,  222,  219,  219,  219,  219,  219,  223,  219,  219,
      219,  219,  219,  219,  223,  219,  219,  219,  223,  223,
      223,  223,  223,  223,   31,   31,   31,   31,   31,   31,
       31,   40,  219,  219,   40,  219,   40,   40,   31,   31,
       40,  224,  225,  219,  221,  219,  222,  219,  219,  219,
      226,   40,  226,  219,  219,  219,  219,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
      219,  219,   40,  219,   40,   40,   40,  219,  219,   40,

       40,  224,  225,  225,  219,  219,  226,  219,  219,  219,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,  219,  219,  226,
      219,  219,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,  219,  226,  219,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,  219,  219,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,  219,  219,  219,  219,    0,  219,
      219,  219,  219,  219,  219,  219
    } ;

static yyconst flex_int16_t yy_nxt[884] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,    8,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       25,   25,   25,   25,   25,   25,   26,    8,   27,   28,
       29,   30,   31,   32,   33,   25,   25,   34,   35,   36,
       37,   25,   38,   39,   40,   41,   42,   25,   25,   25,
       25,   43,   54,   59,   54,   60,   61,   98,   61,   63,
       44,   45,   99,   46,   65,  168,   60,   61,  167,   61,
       61,  104,   61,   47,   66,   61,  105,   61,   61,   48,
      166,   49,   61,   61,   61,   61,   66,   50,   59,  142,
       92,   61,  168,   51,   43,   98,  167,   68,   61,   61,

       99,   61,   61,   44,   45,   61,   46,   61,   61,   62,
      166,   54,   62,   54,   62,   61,   47,   78,   74,   62,
       69,   61,   48,   62,   49,   75,  110,   63,  110,   61,
       50,   61,   61,  142,   62,  107,   51,   61,   62,   61,
       61,   62,   76,   62,   91,   61,   79,  107,   80,   62,
      219,  104,   62,   61,   62,  219,  105,   62,   77,   70,
       81,  108,   71,   62,   72,  106,   62,   73,   62,  109,
       62,   62,  139,   62,  140,   62,   84,   82,   62,   62,
       85,  109,   62,   83,   62,   62,  106,   62,   87,   58,
       62,   86,   62,   88,  138,   63,   62,   56,   65,   95,

       92,   89,   93,  101,   90,   96,  138,   62,   66,   94,
       62,   62,   91,   62,   62,   62,   68,   62,   67,   64,
       66,   65,  141,   60,  141,   62,   62,   97,   62,   62,
       58,   66,   62,  100,   62,  111,   62,   78,   62,   62,
       62,  112,   62,   66,   62,   62,   56,  108,  113,  219,
       62,   62,   53,   62,   62,  109,   62,  114,   62,   62,
       62,   62,   53,  115,   62,   62,   62,  109,  120,   62,
       62,  219,   62,  118,  117,  116,   62,  139,   62,  139,
      219,   62,   62,   62,   62,  119,   62,  121,   62,  219,
       62,   62,  123,   62,  122,   62,   62,  182,  219,   62,

       62,   62,  183,   62,  124,   62,   62,   62,  125,   62,
       62,  128,   62,  126,   62,  219,  129,   62,   62,  127,
       62,   62,   62,  219,  130,   62,   62,   62,   65,   62,
       92,   62,   62,   62,  132,   62,   62,   62,   66,   94,
       62,  131,  219,  133,   62,   62,   62,  134,  135,   62,
       66,   62,  219,   62,   62,  219,  219,   62,   62,   62,
       62,   62,  219,  129,  219,   62,   62,  136,   62,   62,
       62,   62,  137,  143,   62,   62,   62,  215,  144,  145,
      146,   62,  216,   62,   62,   62,   62,  148,   62,   62,
      219,   62,   62,  217,   62,   62,  219,  147,  218,  219,

       62,   62,   62,   62,   62,   62,   62,   62,   62,  151,
       62,  152,  219,   62,  154,  219,  149,   62,   62,  150,
      153,   62,   62,  155,  219,  219,   62,   62,   62,   62,
       62,   62,   62,   62,  219,   62,   62,   62,   62,  219,
      219,   62,  219,  219,  156,   62,   62,   62,   62,   62,
      219,   62,   62,  160,  157,   62,  159,   62,   62,  219,
       62,  158,   62,  219,  162,   62,   62,   62,   62,   62,
      219,   62,   62,  164,  161,   62,   62,   62,  219,  163,
       62,   62,  219,  219,   62,   62,   62,   62,   62,   62,
       62,  219,   62,  165,   62,  170,  219,   62,  219,  169,

       62,   62,   62,  171,   62,   62,   62,   62,   62,  172,
      219,   62,   62,  219,   62,  219,   62,   62,   62,   62,
       62,  173,   62,   62,  219,  219,   62,   62,  174,   62,
       62,   62,   62,   62,  175,  219,   62,   62,  176,  177,
       62,   62,  178,  219,   62,   62,   62,   62,   62,   62,
       62,  219,   62,  179,   62,   62,   62,  219,   62,   62,
       62,   62,   62,   62,  219,  182,   62,   62,   62,  180,
      183,   62,   62,  184,   62,   62,   62,   62,  181,  219,
       62,   62,  219,   62,   62,   62,   62,  219,   62,   62,
      219,   62,  219,   62,   62,  219,   62,  185,   62,   62,

      219,  186,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,  219,   62,  189,   62,   62,   62,  187,
      188,  219,  219,   62,   62,   62,   62,   62,  190,   62,
       62,  191,   62,   62,   62,  219,  194,   62,  219,   62,
      219,   62,   62,  219,  192,  193,   62,   62,  219,   62,
       62,  197,   62,   62,  195,   62,   62,  219,  219,   62,
       62,   62,  196,   62,   62,  219,  219,   62,   62,  199,
      198,   62,  200,   62,  219,   62,  219,   62,   62,   62,
       62,  219,   62,   62,   62,  219,   62,  202,   62,  201,
       62,  219,  219,  219,   62,   62,  203,   62,   62,   62,

      219,   62,   62,  204,  219,   62,   62,  206,   62,   62,
      219,  219,   62,  219,   62,  205,   62,   62,   62,  219,
       62,  207,   62,   62,   62,   62,   62,   62,   62,   62,
       62,  210,  211,   62,  219,   62,  219,  219,  208,  209,
       62,   62,   62,   62,   62,  219,   62,  215,  212,   62,
       62,   62,  216,   62,   62,   62,  219,  219,   62,   62,
      213,   62,  214,  217,   62,  219,   62,  219,  218,   62,
      219,  219,  219,  219,  219,  219,   62,  219,  219,  219,
       62,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,   62,   62,  219,  219,  219,   62,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,   62,   52,   52,
       52,   52,   55,   55,   55,   55,   57,   57,   57,   57,
       62,   62,  102,  219,  102,  102,  103,  103,  103,   61,
       61,    7,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219
    } ;

static yyconst flex_int16_t yy_chk[884] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    9,   17,    9,   17,   18,   49,   18,   18,
        3,    3,   49,    3,   20,  168,   20,   25,  167,   25,
       25,   53,   18,    3,   20,   29,   53,   29,   29,    3,
      166,    3,   30,   25,   30,   30,   20,    3,   44,  142,
       44,   29,  141,    3,    4,   98,  140,   29,   30,   32,

       98,   32,   32,    4,    4,   33,    4,   33,   33,   35,
      139,   54,   35,   54,   35,   32,    4,   35,   32,   62,
       30,   33,    4,   62,    4,   32,   66,   63,   66,   34,
        4,   34,   34,  110,   62,   63,    4,   31,   36,   31,
       31,   36,   33,   36,   91,   34,   36,   63,   37,   37,
      103,  104,   37,   31,   37,  103,  104,   37,   34,   31,
       38,   65,   31,   38,   31,   59,   38,   31,   38,   65,
       39,   38,  107,   39,  107,   39,   40,   38,   39,   40,
       40,   65,   40,   39,   40,   41,  106,   40,   41,   57,
       41,   40,   42,   41,  106,   45,   42,   55,   46,   47,

       46,   41,   45,   51,   42,   47,  106,   42,   46,   46,
       47,   45,   43,   48,   47,   45,   48,   48,   23,   19,
       46,   60,  109,   60,  109,   47,   45,   48,   48,   50,
       12,   60,   50,   50,   50,   68,   69,   50,   70,   68,
       69,   71,   70,   60,   72,   71,   11,  108,   72,    7,
       68,   69,    6,   70,   73,  108,   71,   73,   73,   72,
       74,   75,    5,   73,   74,   75,   76,  108,   78,   73,
       76,    0,   78,   76,   75,   74,   75,  138,   77,  138,
        0,   76,   77,   78,   79,   77,   80,   79,   79,    0,
       80,   81,   80,   77,   79,   81,   85,  182,    0,   79,

       85,   80,  182,   83,   81,   82,   81,   83,   82,   82,
       84,   85,   86,   83,   84,    0,   86,   87,   83,   84,
       82,   87,   88,    0,   87,   84,   88,   86,   92,   89,
       92,   90,   87,   89,   90,   90,   93,   88,   92,   92,
       93,   89,    0,   93,   89,   95,   90,   96,   97,   95,
       92,   93,    0,  100,   96,    0,    0,  100,   96,  101,
       95,  111,    0,  101,    0,  111,   97,  100,  100,   96,
       97,  112,  101,  111,  101,  112,  111,  215,  112,  113,
      114,   97,  215,  113,  114,  115,  112,  116,  117,  115,
        0,  116,  117,  217,  113,  114,    0,  115,  217,    0,

      115,  118,  116,  117,  119,  118,  120,  121,  119,  120,
      120,  121,    0,  122,  123,    0,  118,  122,  123,  119,
      122,  120,  121,  124,    0,    0,  125,  124,  122,  123,
      125,  126,  127,  128,    0,  126,  127,  128,  124,    0,
        0,  125,    0,    0,  127,  129,  126,  127,  128,  129,
        0,  130,  131,  132,  129,  130,  131,  132,  136,    0,
      129,  130,  136,    0,  134,  133,  130,  131,  132,  133,
        0,  134,  135,  136,  133,  134,  135,  137,    0,  135,
      133,  137,    0,    0,  143,  144,  134,  135,  143,  144,
      145,    0,  137,  137,  145,  144,    0,  146,    0,  143,

      144,  146,  147,  145,  148,  145,  147,  149,  148,  147,
        0,  149,  146,    0,  150,    0,  151,  147,  150,  148,
      151,  150,  149,  153,    0,    0,  152,  153,  150,  150,
      152,  151,  154,  155,  152,    0,  154,  155,  153,  154,
      157,  152,  155,    0,  157,  156,  158,  154,  155,  156,
      158,    0,  159,  156,  160,  157,  159,    0,  160,  161,
      156,  158,  162,  161,    0,  164,  162,  159,  163,  160,
      164,  165,  163,  165,  161,  165,  169,  162,  163,    0,
      169,  170,    0,  163,  171,  170,  165,    0,  171,  172,
        0,  169,    0,  172,  164,    0,  170,  172,  164,  171,

        0,  173,  174,  175,  172,  173,  174,  175,  176,  164,
      177,  178,  176,    0,  177,  178,  173,  174,  175,  176,
      177,    0,    0,  176,  179,  177,  178,  180,  179,  181,
      184,  180,  185,  181,  184,    0,  185,  188,    0,  179,
        0,  188,  180,    0,  181,  184,  186,  185,    0,  187,
      186,  188,  188,  187,  186,  189,  190,    0,    0,  189,
      190,  186,  187,  191,  187,    0,    0,  191,  192,  190,
      189,  190,  192,  193,    0,  194,    0,  193,  191,  194,
      195,    0,  196,  192,  195,    0,  196,  195,  193,  193,
      194,    0,    0,    0,  197,  195,  196,  196,  197,  198,

        0,  199,  200,  198,    0,  199,  200,  200,  201,  197,
        0,    0,  201,    0,  198,  199,  199,  200,  202,    0,
      203,  201,  202,  201,  203,  205,  204,  206,  207,  205,
      204,  206,  207,  202,    0,  203,    0,    0,  202,  204,
      205,  204,  206,  207,  208,    0,  209,  211,  208,  210,
      209,  212,  211,  210,  213,  212,    0,    0,  213,  208,
      209,  209,  210,  214,  210,    0,  212,    0,  214,  213,
        0,    0,    0,    0,    0,    0,  211,    0,    0,    0,
      211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  211,  214,    0,    0,    0,  214,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  214,  220,  220,
      220,  220,  221,  221,  221,  221,  222,  222,  222,  222,
      223,  223,  224,    0,  224,  224,  225,  225,  225,  226,
      226,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int zz_flex_debug;
int zz_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *zztext;
#line 1 "scanner.ll"
/* -*-C++-*- */
#line 3 "scanner.ll"
#include <iostream>
#include <cstring>
#include <compiler/ParseTree.h>
#include "parser.h"
    
    std::vector<YY_BUFFER_STATE> buffer_stack;
    std::vector<bool> int_stack;
    void push_buffer(YY_BUFFER_STATE);
    void pop_buffer();
    void return_to_main_buffer();


#line 754 "../../../JAGS/src/terminal/scanner.cc"

#define INITIAL 0
#define RDATA 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int zzwrap (void );
#else
extern int zzwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( zztext, zzleng, 1, zzout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( zzin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( zzin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, zzin))==0 && ferror(zzin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(zzin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int zzlex (void);

#define YY_DECL int zzlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after zztext and zzleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 23 "scanner.ll"


#line 912 "../../../JAGS/src/terminal/scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! zzin )
			zzin = stdin;

		if ( ! zzout )
			zzout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			zzensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				zz_create_buffer(zzin,YY_BUF_SIZE );
		}

		zz_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of zztext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 220 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 832 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "scanner.ll"
zzlval.intval=MODEL; return MODEL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 26 "scanner.ll"
zzlval.intval=DATA; return DATA;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 27 "scanner.ll"
zzlval.intval=IN; return IN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 28 "scanner.ll"
zzlval.intval=TO; return TO;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 29 "scanner.ll"
zzlval.intval=INITS; return INITS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 30 "scanner.ll"
zzlval.intval=PARAMETERS; return PARAMETERS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 32 "scanner.ll"
zzlval.intval=COMPILE; return COMPILE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 33 "scanner.ll"
zzlval.intval=NCHAINS; return NCHAINS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 34 "scanner.ll"
zzlval.intval=INITIALIZE; return INITIALIZE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 35 "scanner.ll"
zzlval.intval=CHAIN; return CHAIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "scanner.ll"
zzlval.intval=UPDATE; return UPDATE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "scanner.ll"
zzlval.intval=ADAPT; return ADAPT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "scanner.ll"
zzlval.intval=BY; return BY;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 41 "scanner.ll"
zzlval.intval=MONITOR; return MONITOR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 42 "scanner.ll"
zzlval.intval=MONITORS; return MONITORS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "scanner.ll"
zzlval.intval=TYPE; return TYPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "scanner.ll"
zzlval.intval=SET; return SET;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "scanner.ll"
zzlval.intval=CLEAR; return CLEAR;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "scanner.ll"
zzlval.intval=THIN; return THIN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "scanner.ll"
zzlval.intval=SAMPLERS; return SAMPLERS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 49 "scanner.ll"
zzlval.intval=CODA; return CODA;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 50 "scanner.ll"
zzlval.intval=STEM; return STEM;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "scanner.ll"
zzlval.intval=LOAD; return LOAD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "scanner.ll"
zzlval.intval=EXIT; return EXIT;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "scanner.ll"
zzlval.intval=DIRECTORY; return DIRECTORY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "scanner.ll"
zzlval.intval=CD; return CD;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "scanner.ll"
zzlval.intval=PWD; return PWD;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "scanner.ll"
zzlval.intval=RUN; return RUN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 60 "scanner.ll"
return ',';
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 61 "scanner.ll"
return '[';
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 62 "scanner.ll"
return ']';
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 63 "scanner.ll"
return '(';
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 64 "scanner.ll"
return ')';
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 65 "scanner.ll"
return '=';
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 66 "scanner.ll"
return ARROW;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 67 "scanner.ll"
return '*';
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 68 "scanner.ll"
return ':';
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 69 "scanner.ll"
return ';';
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 70 "scanner.ll"
return '`';
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 "scanner.ll"
BEGIN(COMMENT);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 73 "scanner.ll"
/* Eat up anything that's not a '*'   */
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 74 "scanner.ll"
/* Eat up '*'s not followed by a '/'  */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 77 "scanner.ll"
/* Eat whitespace */
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 78 "scanner.ll"
/* Eat comments */
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 79 "scanner.ll"
/* Eat newlines */
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 80 "scanner.ll"
return ENDCMD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 85 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 91 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "scanner.ll"
{
  zzlval.intval = atoi(zztext); return INT;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "scanner.ll"
return DIM;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "scanner.ll"
return NA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "scanner.ll"
return R_NULL;
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 110 "scanner.ll"
return STRUCTURE;
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 111 "scanner.ll"
return LIST;
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 112 "scanner.ll"
return 'c';
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 113 "scanner.ll"
return ASINTEGER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "scanner.ll"
{ 
  zzlval.stringptr = new std::string(zztext);
  return NAME;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 120 "scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  // Remove enclosing quotes
  zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
  zzlval.stringptr->erase(0, 1);
  return STRING;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 128 "scanner.ll"
{
    if (buffer_stack.empty()) {
	yyterminate();
    }
    else {
	pop_buffer();
    }
    return ENDSCRIPT;
}
	YY_BREAK
case YY_STATE_EOF(RDATA):
#line 137 "scanner.ll"
{
    pop_buffer();
    BEGIN(INITIAL);
    return ENDDATA;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "scanner.ll"
ECHO;
	YY_BREAK
#line 1383 "../../../JAGS/src/terminal/scanner.cc"
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed zzin at a new source and called
			 * zzlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = zzin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( zzwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * zztext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of zzlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					zzrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			zzrestart(zzin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 220 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 220 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 219);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up zztext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					zzrestart(zzin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( zzwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve zztext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void zzrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        zzensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            zz_create_buffer(zzin,YY_BUF_SIZE );
	}

	zz_init_buffer(YY_CURRENT_BUFFER,input_file );
	zz_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void zz_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		zzpop_buffer_state();
	 *		zzpush_buffer_state(new_buffer);
     */
	zzensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	zz_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (zzwrap()) processing, but the only time this flag
	 * is looked at is after zzwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void zz_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	zzin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE zz_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) zzalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_is_our_buffer = 1;

	zz_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with zz_create_buffer()
 * 
 */
    void zz_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		zzfree((void *) b->yy_ch_buf  );

	zzfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a zzrestart() or at EOF.
 */
    static void zz_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	zz_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then zz_init_buffer was _probably_
     * called from zzrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void zz_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		zz_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	zzensure_buffer_stack();

	/* This block is copied from zz_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from zz_switch_to_buffer. */
	zz_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void zzpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	zz_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		zz_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void zzensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE zz_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	zz_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to zzlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       zz_scan_bytes() instead.
 */
YY_BUFFER_STATE zz_scan_string (yyconst char * yystr )
{
    
	return zz_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to zzlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE zz_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) zzalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = zz_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in zz_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		zztext[zzleng] = (yy_hold_char); \
		(yy_c_buf_p) = zztext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		zzleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int zzget_lineno  (void)
{
        
    return zzlineno;
}

/** Get the input stream.
 * 
 */
FILE *zzget_in  (void)
{
        return zzin;
}

/** Get the output stream.
 * 
 */
FILE *zzget_out  (void)
{
        return zzout;
}

/** Get the length of the current token.
 * 
 */
int zzget_leng  (void)
{
        return zzleng;
}

/** Get the current token.
 * 
 */

char *zzget_text  (void)
{
        return zztext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void zzset_lineno (int  line_number )
{
    
    zzlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see zz_switch_to_buffer
 */
void zzset_in (FILE *  in_str )
{
        zzin = in_str ;
}

void zzset_out (FILE *  out_str )
{
        zzout = out_str ;
}

int zzget_debug  (void)
{
        return zz_flex_debug;
}

void zzset_debug (int  bdebug )
{
        zz_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from zzlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    zzin = stdin;
    zzout = stdout;
#else
    zzin = (FILE *) 0;
    zzout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * zzlex_init()
     */
    return 0;
}

/* zzlex_destroy is for both reentrant and non-reentrant scanners. */
int zzlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		zz_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		zzpop_buffer_state();
	}

	/* Destroy the stack itself. */
	zzfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * zzlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *zzalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *zzrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void zzfree (void * ptr )
{
	free( (char *) ptr );	/* see zzrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 142 "scanner.ll"



int zzwrap()
{
  return 1;
}

bool open_data_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	push_buffer(YY_CURRENT_BUFFER);
	zz_switch_to_buffer(zz_create_buffer(file,YY_BUF_SIZE ) );
	BEGIN(RDATA);
	return true;
    }
    else {
	return false;
    }
}

bool open_command_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	push_buffer(YY_CURRENT_BUFFER);
	zz_switch_to_buffer(zz_create_buffer(file,YY_BUF_SIZE ));
	return true;
    }
    else {
	return false;
    }
}

void push_buffer(YY_BUFFER_STATE new_buffer) {
    buffer_stack.push_back(new_buffer);
}

void pop_buffer() {
    if (!buffer_stack.empty()) {
	zz_delete_buffer (YY_CURRENT_BUFFER);
	zz_switch_to_buffer(buffer_stack.back());
	buffer_stack.pop_back();
    }
}

void return_to_main_buffer() {
    /* Clear all buffers in the stack and return to the first */
    if (!buffer_stack.empty()) {
	for (unsigned int i = 1; i < buffer_stack.size(); ++i) {
	    zz_delete_buffer (buffer_stack[i]);
	}
	zz_switch_to_buffer(buffer_stack[0]);
	buffer_stack.clear();
    }
    BEGIN(INITIAL);
}


